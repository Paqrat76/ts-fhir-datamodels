{{!-- context (sdHbs) is a HbsStructureDefinition --}}
/**
 * {{sdHbs.name}} Class
 *
 * @remarks
 * {{{sdHbs.description}}}
{{#if sdHbs.purpose}}
 *
 * {{{sdHbs.purpose}}}
{{/if}}
 *
 * **FHIR Specification**
{{#if sdHbs.parentComponent.rootElement.short}}
 * - **Short:** {{{sdHbs.parentComponent.rootElement.short}}}
{{/if}}
{{#if sdHbs.parentComponent.rootElement.definition}}
 * - **Definition:** {{{sdHbs.parentComponent.rootElement.definition}}}
{{/if}}
{{#if sdHbs.parentComponent.rootElement.comment}}
 * - **Comment:** {{{sdHbs.parentComponent.rootElement.comment}}}
{{/if}}
{{#if sdHbs.parentComponent.rootElement.requirements}}
 * - **Requirements:** {{{sdHbs.parentComponent.rootElement.requirements}}}
{{/if}}
 * - **FHIR Version:** {{sdHbs.fhirVersion}}
 *
 * @category Data Models: {{upperCamelCase sdHbs.kind}}
 * @see [FHIR {{sdHbs.type}}]({{{sdHbs.url}}})
 */
{{#if sdHbs.istanbulIgnore}}/* istanbul ignore next */ {{/if}}export class {{sdHbs.name}} extends {{sdHbs.baseDefinitionType}} implements {{complexTypeImplements sdHbs.type sdHbs.baseDefinitionType}} {
{{#if sdHbs.parentComponent.requiredConstructor}}
{{!-- Constructor Required Partial --}}
{{> constructorRequiredPartial compHbs=sdHbs.parentComponent}}
{{else}}
  // eslint-disable-next-line @typescript-eslint/no-useless-constructor
  constructor() {
    super();
  }
{{/if}}

{{#unless sdHbs.isExtension}}
{{!-- Public Static Parse Method Partial --}}
{{> publicStaticParseMethodPartial sdHbs.parentComponent}}

{{/unless}}
{{!-- Private Field Declarations Partial --}}
{{#each sdHbs.parentComponent.elementDefinitions}}
{{> privateFieldDeclarationPartial edHbs=this }}

{{/each}}
  /* eslint-disable @typescript-eslint/no-unnecessary-type-conversion */

{{!-- Public Field Methods Partial --}}
{{#each sdHbs.parentComponent.elementDefinitions}}
{{> publicFieldMethodsPartial edHbs=this }}
{{/each}}
  /* eslint-enable @typescript-eslint/no-unnecessary-type-conversion */

{{!-- Public Base Methods Partial --}}
{{> publicBaseMethodsPartial sdHbs.parentComponent}}

  /**
   * @returns `true` if the instance is a FHIR complex datatype; `false` otherwise
   */
  public override isComplexDataType(): boolean {
    return true;
  }

  /**
   * @returns the complex or primitive data model type name (e.g., 'Period", 'StringType', `UriType', etc.)
   */
  public override dataTypeName(): string {
    return this.constructor.name;
  }

{{!-- Public toJSON Method Partial --}}
{{> publicToJSONMethodPartial sdHbs.parentComponent}}
}
{{!-- Public Component Classes Partial --}}
{{#if sdHbs.hasChildComponents}}
  {{#each sdHbs.childComponents}}
{{> fhirChildComponentPartial compHbs=this }}
  {{/each}}
{{/if}}
