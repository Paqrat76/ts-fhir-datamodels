// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`src/generator-lib/templates/utils-hbs getSdHbsProperties should return the correct properties for StructureDefinition-AuditEvent 1`] = `
{
  "baseDefinitionType": "DomainResource",
  "childComponents": [
    {
      "baseDefinitionType": "BackboneElement",
      "componentName": "AuditEventAgentComponent",
      "elementDefinitions": [
        {
          "cardinality": "0..1",
          "comment": undefined,
          "definition": "Specification of the participation type the user plays when performing the event.",
          "fieldIdentifierName": "type_",
          "fieldName": "type",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": true,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": false,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.agent.type",
          "requirements": undefined,
          "short": "How agent participated",
          "type": {
            "code": "CodeableConcept",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "CodeableConcept",
            "primitiveJsonType": undefined,
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..*",
          "comment": "Should be roles relevant to the event. Should  not be an exhaustive list of roles.",
          "definition": "The security role that the user was acting under, that come from local codes defined by the access control security system (e.g. RBAC, ABAC) used in the local context.",
          "fieldIdentifierName": "role",
          "fieldName": "role",
          "isArray": true,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": true,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": false,
          "isOptionalList": true,
          "isPrimitiveType": false,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "*",
          "min": 0,
          "path": "AuditEvent.agent.role",
          "requirements": "This value ties an audited event to a user\\'s role(s). It is an optional value that might be used to group events for analysis by user functional role categories.",
          "short": "Agent role in the event",
          "type": {
            "code": "CodeableConcept",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "CodeableConcept",
            "primitiveJsonType": undefined,
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..1",
          "comment": "Where a User ID is available it will go into who.identifier.",
          "definition": "Reference to who this agent is that was involved in the event.",
          "fieldIdentifierName": "who",
          "fieldName": "who",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": false,
          "isReferenceType": true,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": true,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.agent.who",
          "requirements": "This field ties an audit event to a specific resource or identifier.",
          "short": "Identifier of who",
          "type": {
            "code": "Reference",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "Reference",
            "primitiveJsonType": undefined,
            "targetProfile": [
              "http://hl7.org/fhir/StructureDefinition/PractitionerRole",
              "http://hl7.org/fhir/StructureDefinition/Practitioner",
              "http://hl7.org/fhir/StructureDefinition/Organization",
              "http://hl7.org/fhir/StructureDefinition/Device",
              "http://hl7.org/fhir/StructureDefinition/Patient",
              "http://hl7.org/fhir/StructureDefinition/RelatedPerson",
            ],
            "targetResource": [
              "PractitionerRole",
              "Practitioner",
              "Organization",
              "Device",
              "Patient",
              "RelatedPerson",
            ],
          },
        },
        {
          "cardinality": "0..1",
          "comment": undefined,
          "definition": "Alternative agent Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g. single sign-on), if available.",
          "fieldIdentifierName": "altId",
          "fieldName": "altId",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": true,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.agent.altId",
          "requirements": "In some situations, a human user may authenticate with one identity but, to access a specific application system, may use a synonymous identify. For example, some "single sign on" implementations will do this. The alternative identifier would then be the original identify  used for authentication, and the User ID is the one known to and used by the application.",
          "short": "Alternative User identity",
          "type": {
            "code": "StringType",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "string",
            "primitiveJsonType": "string",
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..1",
          "comment": undefined,
          "definition": "Human-meaningful name for the agent.",
          "fieldIdentifierName": "name",
          "fieldName": "name",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": true,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.agent.name",
          "requirements": "The User ID and Authorization User ID may be internal or otherwise obscure values. This field assists the auditor in identifying the actual user.",
          "short": "Human friendly name for the agent",
          "type": {
            "code": "StringType",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "string",
            "primitiveJsonType": "string",
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "1..1",
          "comment": "There can only be one initiator. If the initiator is not clear, then do not choose any one agent as the initiator.",
          "definition": "Indicator that the user is or is not the requestor, or initiator, for the event being audited.",
          "fieldIdentifierName": "requestor",
          "fieldName": "requestor",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": false,
          "isOptionalList": false,
          "isPrimitiveType": true,
          "isReferenceType": false,
          "isRequired": true,
          "isRequiredItem": true,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": true,
          "max": "1",
          "min": 1,
          "path": "AuditEvent.agent.requestor",
          "requirements": "This value is used to distinguish between requestor-users and recipient-users. For example, one person may initiate a report-output to be sent to another user.",
          "short": "Whether user is initiator",
          "type": {
            "code": "BooleanType",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "boolean",
            "primitiveJsonType": "boolean",
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..1",
          "comment": undefined,
          "definition": "Where the event occurred.",
          "fieldIdentifierName": "location",
          "fieldName": "location",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": false,
          "isReferenceType": true,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.agent.location",
          "requirements": undefined,
          "short": "Where",
          "type": {
            "code": "Reference",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "Reference",
            "primitiveJsonType": undefined,
            "targetProfile": [
              "http://hl7.org/fhir/StructureDefinition/Location",
            ],
            "targetResource": [
              "Location",
            ],
          },
        },
        {
          "cardinality": "0..*",
          "comment": "For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.",
          "definition": "The policy or plan that authorized the activity being recorded. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.",
          "fieldIdentifierName": "policy",
          "fieldName": "policy",
          "isArray": true,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": false,
          "isOptionalList": true,
          "isPrimitiveType": true,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "*",
          "min": 0,
          "path": "AuditEvent.agent.policy",
          "requirements": "This value is used retrospectively to determine the authorization policies.",
          "short": "Policy that authorized event",
          "type": {
            "code": "UriType",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "uri",
            "primitiveJsonType": "string",
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..1",
          "comment": undefined,
          "definition": "Type of media involved. Used when the event is about exporting/importing onto media.",
          "fieldIdentifierName": "media",
          "fieldName": "media",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": true,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": false,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.agent.media",
          "requirements": "Usually, this is used instead of specifying a network address. This field is not used for Media Id (i.e. the serial number of a CD).",
          "short": "Type of media",
          "type": {
            "code": "Coding",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "Coding",
            "primitiveJsonType": undefined,
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..1",
          "comment": undefined,
          "definition": "Logical network location for application activity, if the activity has a network location.",
          "fieldIdentifierName": "network",
          "fieldName": "network",
          "isArray": false,
          "isBackboneType": true,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": false,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.agent.network",
          "requirements": undefined,
          "short": "Logical network location for application activity",
          "type": {
            "code": "AuditEventAgentNetworkComponent",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "BackboneElement",
            "primitiveJsonType": undefined,
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..*",
          "comment": "Use AuditEvent.agent.purposeOfUse when you know that is specific to the agent, otherwise use AuditEvent.purposeOfEvent. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.",
          "definition": "The reason (purpose of use), specific to this agent, that was used during the event being recorded.",
          "fieldIdentifierName": "purposeOfUse",
          "fieldName": "purposeOfUse",
          "isArray": true,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": true,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": false,
          "isOptionalList": true,
          "isPrimitiveType": false,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "*",
          "min": 0,
          "path": "AuditEvent.agent.purposeOfUse",
          "requirements": undefined,
          "short": "Reason given for this user",
          "type": {
            "code": "CodeableConcept",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "CodeableConcept",
            "primitiveJsonType": undefined,
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
      ],
      "fhirCoreImports": [
        "BackboneElement",
        "BooleanType",
        "FhirDataTypeParser",
        "FhirError",
        "IBase",
        "INSTANCE_EMPTY_ERROR_MSG",
        "JSON",
        "PrimitiveType",
        "PrimitiveTypeJson",
        "REQUIRED_PROPERTIES_DO_NOT_EXIST",
        "REQUIRED_PROPERTIES_REQD_IN_JSON",
        "StringType",
        "UriType",
        "assertFhirType",
        "assertFhirTypeList",
        "assertIsDefined",
        "copyListValues",
        "fhirBoolean",
        "fhirBooleanSchema",
        "fhirString",
        "fhirStringSchema",
        "fhirUri",
        "fhirUriSchema",
        "getPrimitiveTypeJson",
        "getPrimitiveTypeListJson",
        "isDefined",
        "isDefinedList",
        "isElementEmpty",
        "isEmpty",
        "parseBooleanType",
        "parseFhirPrimitiveData",
        "parseStringType",
        "parseUriType",
        "setFhirBackboneElementJson",
        "setFhirComplexJson",
        "setFhirComplexListJson",
        "setFhirPrimitiveJson",
        "setFhirPrimitiveListJson",
      ],
      "generatedImports": [
        "CodeableConcept",
        "Coding",
        "PARSABLE_DATATYPE_MAP",
        "Reference",
        "ReferenceTargets",
      ],
      "hasChoiceFields": false,
      "hasCodeSystemEnums": false,
      "hasOnlyOnePrimitiveField": false,
      "hasParsableDataType": true,
      "hasPrimitiveFields": true,
      "hasRequiredFields": true,
      "hasResourceFields": false,
      "isComponentBackboneElement": true,
      "isComponentBackboneType": false,
      "isComponentDataType": false,
      "isComponentDomainResource": false,
      "isComponentElement": false,
      "isComponentResource": false,
      "numRequiredFields": 1,
      "parentFieldName": "AuditEvent.agent",
      "parentKind": "resource",
      "parentName": "AuditEvent",
      "parentType": "AuditEvent",
      "parentUrl": "http://hl7.org/fhir/StructureDefinition/AuditEvent",
      "requiredConstructor": true,
      "rootElement": {
        "comment": "Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity. For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.",
        "componentLevel": 2,
        "componentName": "AuditEventAgentComponent",
        "definition": "An actor taking an active role in the event or activity that is logged.",
        "path": "AuditEvent.agent",
        "requirements": "An agent can be a person, an organization, software, device, or other actors that may be ascribed responsibility.",
        "short": "Actor involved in the event",
        "typeCode": "BackboneElement",
      },
    },
    {
      "baseDefinitionType": "BackboneElement",
      "componentName": "AuditEventAgentNetworkComponent",
      "elementDefinitions": [
        {
          "cardinality": "0..1",
          "comment": "This could be a device id, IP address or some other identifier associated with a device.",
          "definition": "An identifier for the network access point of the user device for the audit event.",
          "fieldIdentifierName": "address",
          "fieldName": "address",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": true,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.agent.network.address",
          "requirements": "This datum identifies the user\\'s network access point, which may be distinct from the server that performed the action. It is an optional value that may be used to group events recorded on separate servers for analysis of a specific network access point\\'s data access across all servers.",
          "short": "Identifier for the network access point of the user device",
          "type": {
            "code": "StringType",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "string",
            "primitiveJsonType": "string",
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..1",
          "comment": undefined,
          "definition": "An identifier for the type of network access point that originated the audit event.",
          "fieldIdentifierName": "type_",
          "fieldName": "type",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": true,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.agent.network.type",
          "requirements": "This datum identifies the type of network access point identifier of the user device for the audit event. It is an optional value that may be used to group events recorded on separate servers for analysis of access according to a network access point\\'s type.",
          "short": "The type of network access point",
          "type": {
            "code": "CodeType",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "code",
            "primitiveJsonType": "string",
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
      ],
      "fhirCoreImports": [
        "BackboneElement",
        "CodeType",
        "FhirDataTypeParser",
        "IBase",
        "INSTANCE_EMPTY_ERROR_MSG",
        "JSON",
        "StringType",
        "assertFhirType",
        "fhirCode",
        "fhirCodeSchema",
        "fhirString",
        "fhirStringSchema",
        "getPrimitiveTypeJson",
        "isDefined",
        "isElementEmpty",
        "isEmpty",
        "parseCodeType",
        "parseFhirPrimitiveData",
        "parseStringType",
        "setFhirPrimitiveJson",
      ],
      "generatedImports": [
        "PARSABLE_DATATYPE_MAP",
      ],
      "hasChoiceFields": false,
      "hasCodeSystemEnums": false,
      "hasOnlyOnePrimitiveField": false,
      "hasParsableDataType": true,
      "hasPrimitiveFields": true,
      "hasRequiredFields": false,
      "hasResourceFields": false,
      "isComponentBackboneElement": true,
      "isComponentBackboneType": false,
      "isComponentDataType": false,
      "isComponentDomainResource": false,
      "isComponentElement": false,
      "isComponentResource": false,
      "numRequiredFields": 0,
      "parentFieldName": "AuditEvent.agent.network",
      "parentKind": "resource",
      "parentName": "AuditEvent",
      "parentType": "AuditEvent",
      "parentUrl": "http://hl7.org/fhir/StructureDefinition/AuditEvent",
      "requiredConstructor": false,
      "rootElement": {
        "comment": undefined,
        "componentLevel": 3,
        "componentName": "AuditEventAgentNetworkComponent",
        "definition": "Logical network location for application activity, if the activity has a network location.",
        "path": "AuditEvent.agent.network",
        "requirements": undefined,
        "short": "Logical network location for application activity",
        "typeCode": "BackboneElement",
      },
    },
    {
      "baseDefinitionType": "BackboneElement",
      "componentName": "AuditEventSourceComponent",
      "elementDefinitions": [
        {
          "cardinality": "0..1",
          "comment": undefined,
          "definition": "Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group.",
          "fieldIdentifierName": "site",
          "fieldName": "site",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": true,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.source.site",
          "requirements": "This value differentiates among the sites in a multi-site enterprise health information system.",
          "short": "Logical source location within the enterprise",
          "type": {
            "code": "StringType",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "string",
            "primitiveJsonType": "string",
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "1..1",
          "comment": undefined,
          "definition": "Identifier of the source where the event was detected.",
          "fieldIdentifierName": "observer",
          "fieldName": "observer",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": false,
          "isOptionalList": false,
          "isPrimitiveType": false,
          "isReferenceType": true,
          "isRequired": true,
          "isRequiredItem": true,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": true,
          "max": "1",
          "min": 1,
          "path": "AuditEvent.source.observer",
          "requirements": "This field ties the event to a specific source system. It may be used to group events for analysis according to where the event was detected.",
          "short": "The identity of source detecting the event",
          "type": {
            "code": "Reference",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "Reference",
            "primitiveJsonType": undefined,
            "targetProfile": [
              "http://hl7.org/fhir/StructureDefinition/PractitionerRole",
              "http://hl7.org/fhir/StructureDefinition/Practitioner",
              "http://hl7.org/fhir/StructureDefinition/Organization",
              "http://hl7.org/fhir/StructureDefinition/Device",
              "http://hl7.org/fhir/StructureDefinition/Patient",
              "http://hl7.org/fhir/StructureDefinition/RelatedPerson",
            ],
            "targetResource": [
              "PractitionerRole",
              "Practitioner",
              "Organization",
              "Device",
              "Patient",
              "RelatedPerson",
            ],
          },
        },
        {
          "cardinality": "0..*",
          "comment": undefined,
          "definition": "Code specifying the type of source where event originated.",
          "fieldIdentifierName": "type_",
          "fieldName": "type",
          "isArray": true,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": true,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": false,
          "isOptionalList": true,
          "isPrimitiveType": false,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "*",
          "min": 0,
          "path": "AuditEvent.source.type",
          "requirements": "This field indicates which type of source is identified by the Audit Source ID. It is an optional value that may be used to group events for analysis according to the type of source where the event occurred.",
          "short": "The type of source where event originated",
          "type": {
            "code": "Coding",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "Coding",
            "primitiveJsonType": undefined,
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
      ],
      "fhirCoreImports": [
        "BackboneElement",
        "FhirDataTypeParser",
        "FhirError",
        "IBase",
        "INSTANCE_EMPTY_ERROR_MSG",
        "JSON",
        "REQUIRED_PROPERTIES_DO_NOT_EXIST",
        "REQUIRED_PROPERTIES_REQD_IN_JSON",
        "StringType",
        "assertFhirType",
        "assertFhirTypeList",
        "assertIsDefined",
        "copyListValues",
        "fhirString",
        "fhirStringSchema",
        "getPrimitiveTypeJson",
        "isDefined",
        "isDefinedList",
        "isElementEmpty",
        "isEmpty",
        "parseFhirPrimitiveData",
        "parseStringType",
        "setFhirComplexJson",
        "setFhirComplexListJson",
        "setFhirPrimitiveJson",
      ],
      "generatedImports": [
        "Coding",
        "PARSABLE_DATATYPE_MAP",
        "Reference",
        "ReferenceTargets",
      ],
      "hasChoiceFields": false,
      "hasCodeSystemEnums": false,
      "hasOnlyOnePrimitiveField": true,
      "hasParsableDataType": true,
      "hasPrimitiveFields": true,
      "hasRequiredFields": true,
      "hasResourceFields": false,
      "isComponentBackboneElement": true,
      "isComponentBackboneType": false,
      "isComponentDataType": false,
      "isComponentDomainResource": false,
      "isComponentElement": false,
      "isComponentResource": false,
      "numRequiredFields": 1,
      "parentFieldName": "AuditEvent.source",
      "parentKind": "resource",
      "parentName": "AuditEvent",
      "parentType": "AuditEvent",
      "parentUrl": "http://hl7.org/fhir/StructureDefinition/AuditEvent",
      "requiredConstructor": true,
      "rootElement": {
        "comment": "Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.",
        "componentLevel": 2,
        "componentName": "AuditEventSourceComponent",
        "definition": "The system that is reporting the event.",
        "path": "AuditEvent.source",
        "requirements": "The event is reported by one source.",
        "short": "Audit Event Reporter",
        "typeCode": "BackboneElement",
      },
    },
    {
      "baseDefinitionType": "BackboneElement",
      "componentName": "AuditEventEntityComponent",
      "elementDefinitions": [
        {
          "cardinality": "0..1",
          "comment": undefined,
          "definition": "Identifies a specific instance of the entity. The reference should be version specific.",
          "fieldIdentifierName": "what",
          "fieldName": "what",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": false,
          "isReferenceType": true,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": true,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.entity.what",
          "requirements": undefined,
          "short": "Specific instance of resource",
          "type": {
            "code": "Reference",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "Reference",
            "primitiveJsonType": undefined,
            "targetProfile": [
              "http://hl7.org/fhir/StructureDefinition/Resource",
            ],
            "targetResource": [
              "Resource",
            ],
          },
        },
        {
          "cardinality": "0..1",
          "comment": "This value is distinct from the user\\'s role or any user relationship to the entity.",
          "definition": "The type of the object that was involved in this audit event.",
          "fieldIdentifierName": "type_",
          "fieldName": "type",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": true,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": false,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.entity.type",
          "requirements": "To describe the object being acted upon. In addition to queries on the subject of the action in an auditable event, it is also important to be able to query on the object type for the action.",
          "short": "Type of entity involved",
          "type": {
            "code": "Coding",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "Coding",
            "primitiveJsonType": undefined,
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..1",
          "comment": undefined,
          "definition": "Code representing the role the entity played in the event being audited.",
          "fieldIdentifierName": "role",
          "fieldName": "role",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": true,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": false,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.entity.role",
          "requirements": "For some detailed audit analysis it may be necessary to indicate a more granular type of entity, based on the application role it serves.",
          "short": "What role the entity played",
          "type": {
            "code": "Coding",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "Coding",
            "primitiveJsonType": undefined,
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..1",
          "comment": "This can be used to provide an audit trail for data, over time, as it passes through the system.",
          "definition": "Identifier for the data life-cycle stage for the entity.",
          "fieldIdentifierName": "lifecycle",
          "fieldName": "lifecycle",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": true,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": false,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.entity.lifecycle",
          "requirements": "Institutional policies for privacy and security may optionally fall under different accountability rules based on data life cycle. This provides a differentiating value for those cases.",
          "short": "Life-cycle stage for the entity",
          "type": {
            "code": "Coding",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "Coding",
            "primitiveJsonType": undefined,
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..*",
          "comment": "Copied from entity meta security tags.",
          "definition": "Security labels for the identified entity.",
          "fieldIdentifierName": "securityLabel",
          "fieldName": "securityLabel",
          "isArray": true,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": true,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": false,
          "isOptionalList": true,
          "isPrimitiveType": false,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "*",
          "min": 0,
          "path": "AuditEvent.entity.securityLabel",
          "requirements": "This field identifies the security labels for a specific instance of an object, such as a patient, to detect/track privacy and security issues.",
          "short": "Security labels on the entity",
          "type": {
            "code": "Coding",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "Coding",
            "primitiveJsonType": undefined,
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..1",
          "comment": "This field may be used in a query/report to identify audit events for a specific person.  For example, where multiple synonymous entity identifiers (patient number, medical record number, encounter number, etc.) have been used.",
          "definition": "A name of the entity in the audit event.",
          "fieldIdentifierName": "name",
          "fieldName": "name",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": true,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": true,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.entity.name",
          "requirements": "Use only where entity can\\'t be identified with an identifier.",
          "short": "Descriptor for entity",
          "type": {
            "code": "StringType",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "string",
            "primitiveJsonType": "string",
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..1",
          "comment": undefined,
          "definition": "Text that describes the entity in more detail.",
          "fieldIdentifierName": "description",
          "fieldName": "description",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": true,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.entity.description",
          "requirements": "Use only where entity can\\'t be identified with an identifier.",
          "short": "Descriptive text",
          "type": {
            "code": "StringType",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "string",
            "primitiveJsonType": "string",
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..1",
          "comment": "The meaning and secondary-encoding of the content of base64 encoded blob is specific to the AuditEvent.type, AuditEvent.subtype, AuditEvent.entity.type, and AuditEvent.entity.role.  The base64 is a general-use and safe container for event specific data blobs regardless of the encoding used by the transaction being recorded.  An AuditEvent consuming application must understand the event it is consuming and the formats used by the event. For example, if auditing an Oracle network database access, the Oracle formats must be understood as they will be simply encoded in the base64binary blob.",
          "definition": "The query parameters for a query-type entities.",
          "fieldIdentifierName": "query",
          "fieldName": "query",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": true,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": true,
          "max": "1",
          "min": 0,
          "path": "AuditEvent.entity.query",
          "requirements": "For query events, it may be necessary to capture the actual query input to the query process in order to identify the specific event. Because of differences among query implementations and data encoding for them, this is a base 64 encoded data blob. It may be subsequently decoded or interpreted by downstream audit analysis processing.",
          "short": "Query parameters",
          "type": {
            "code": "Base64BinaryType",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "base64Binary",
            "primitiveJsonType": "string",
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..*",
          "comment": undefined,
          "definition": "Tagged value pairs for conveying additional information about the entity.",
          "fieldIdentifierName": "detail",
          "fieldName": "detail",
          "isArray": true,
          "isBackboneType": true,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": false,
          "isOptionalList": true,
          "isPrimitiveType": false,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "*",
          "min": 0,
          "path": "AuditEvent.entity.detail",
          "requirements": "Implementation-defined data about specific details of the object accessed or used.",
          "short": "Additional Information about the entity",
          "type": {
            "code": "AuditEventEntityDetailComponent",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "BackboneElement",
            "primitiveJsonType": undefined,
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
      ],
      "fhirCoreImports": [
        "BackboneElement",
        "Base64BinaryType",
        "FhirDataTypeParser",
        "IBase",
        "INSTANCE_EMPTY_ERROR_MSG",
        "JSON",
        "StringType",
        "assertFhirType",
        "assertFhirTypeList",
        "copyListValues",
        "fhirBase64Binary",
        "fhirBase64BinarySchema",
        "fhirString",
        "fhirStringSchema",
        "getPrimitiveTypeJson",
        "isDefined",
        "isDefinedList",
        "isElementEmpty",
        "isEmpty",
        "parseBase64BinaryType",
        "parseFhirPrimitiveData",
        "parseStringType",
        "setFhirBackboneElementListJson",
        "setFhirComplexJson",
        "setFhirComplexListJson",
        "setFhirPrimitiveJson",
      ],
      "generatedImports": [
        "Coding",
        "PARSABLE_DATATYPE_MAP",
        "Reference",
        "ReferenceTargets",
      ],
      "hasChoiceFields": false,
      "hasCodeSystemEnums": false,
      "hasOnlyOnePrimitiveField": false,
      "hasParsableDataType": true,
      "hasPrimitiveFields": true,
      "hasRequiredFields": false,
      "hasResourceFields": false,
      "isComponentBackboneElement": true,
      "isComponentBackboneType": false,
      "isComponentDataType": false,
      "isComponentDomainResource": false,
      "isComponentElement": false,
      "isComponentResource": false,
      "numRequiredFields": 0,
      "parentFieldName": "AuditEvent.entity",
      "parentKind": "resource",
      "parentName": "AuditEvent",
      "parentType": "AuditEvent",
      "parentUrl": "http://hl7.org/fhir/StructureDefinition/AuditEvent",
      "requiredConstructor": false,
      "rootElement": {
        "comment": "Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.",
        "componentLevel": 2,
        "componentName": "AuditEventEntityComponent",
        "definition": "Specific instances of data or objects that have been accessed.",
        "path": "AuditEvent.entity",
        "requirements": "The event may have other entities involved.",
        "short": "Data or objects used",
        "typeCode": "BackboneElement",
      },
    },
    {
      "baseDefinitionType": "BackboneElement",
      "componentName": "AuditEventEntityDetailComponent",
      "elementDefinitions": [
        {
          "cardinality": "1..1",
          "comment": undefined,
          "definition": "The type of extra detail provided in the value.",
          "fieldIdentifierName": "type_",
          "fieldName": "type",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": false,
          "isOptionalList": false,
          "isPrimitiveType": true,
          "isReferenceType": false,
          "isRequired": true,
          "isRequiredItem": true,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "1",
          "min": 1,
          "path": "AuditEvent.entity.detail.type",
          "requirements": undefined,
          "short": "Name of the property",
          "type": {
            "code": "StringType",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "string",
            "primitiveJsonType": "string",
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "1..1",
          "comment": "The value can be string when known to be a string, else base64 encoding should be used to protect binary or undefined content.  The meaning and secondary-encoding of the content of base64 encoded blob is specific to the AuditEvent.type, AuditEvent.subtype, AuditEvent.entity.type, and AuditEvent.entity.role.  The base64 is a general-use and safe container for event specific data blobs regardless of the encoding used by the transaction being recorded.  An AuditEvent consuming application must understand the event it is consuming and the formats used by the event. For example if auditing an Oracle network database access, the Oracle formats must be understood as they will be simply encoded in the base64binary blob.",
          "definition": "The  value of the extra detail.",
          "fieldIdentifierName": "value",
          "fieldName": "value",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": true,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": false,
          "isOptionalList": false,
          "isPrimitiveType": false,
          "isReferenceType": false,
          "isRequired": true,
          "isRequiredItem": true,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": false,
          "max": "1",
          "min": 1,
          "path": "AuditEvent.entity.detail.value[x]",
          "requirements": "Should not duplicate the entity value unless absolutely necessary.",
          "short": "Property value",
          "type": {
            "choiceDataTypes": [
              "StringType",
              "Base64BinaryType",
            ],
            "choiceTypes": [
              "string",
              "base64Binary",
            ],
            "code": "DataType",
            "fhirDataType": "CHOICE",
          },
        },
      ],
      "fhirCoreImports": [
        "BackboneElement",
        "Base64BinaryType",
        "ChoiceDataTypes",
        "ChoiceDataTypesMeta",
        "DataType",
        "FhirDataTypeParser",
        "FhirError",
        "IBase",
        "INSTANCE_EMPTY_ERROR_MSG",
        "InvalidTypeError",
        "JSON",
        "PrimitiveType",
        "REQUIRED_PROPERTIES_DO_NOT_EXIST",
        "REQUIRED_PROPERTIES_REQD_IN_JSON",
        "StringType",
        "assertFhirType",
        "assertIsDefined",
        "fhirString",
        "fhirStringSchema",
        "getPrimitiveTypeJson",
        "isDefined",
        "isElementEmpty",
        "isEmpty",
        "parseFhirPrimitiveData",
        "parseStringType",
        "setFhirPrimitiveJson",
        "setPolymorphicValueJson",
      ],
      "generatedImports": [
        "PARSABLE_DATATYPE_MAP",
      ],
      "hasChoiceFields": true,
      "hasCodeSystemEnums": false,
      "hasOnlyOnePrimitiveField": true,
      "hasParsableDataType": true,
      "hasPrimitiveFields": true,
      "hasRequiredFields": true,
      "hasResourceFields": false,
      "isComponentBackboneElement": true,
      "isComponentBackboneType": false,
      "isComponentDataType": false,
      "isComponentDomainResource": false,
      "isComponentElement": false,
      "isComponentResource": false,
      "numRequiredFields": 2,
      "parentFieldName": "AuditEvent.entity.detail",
      "parentKind": "resource",
      "parentName": "AuditEvent",
      "parentType": "AuditEvent",
      "parentUrl": "http://hl7.org/fhir/StructureDefinition/AuditEvent",
      "requiredConstructor": true,
      "rootElement": {
        "comment": undefined,
        "componentLevel": 3,
        "componentName": "AuditEventEntityDetailComponent",
        "definition": "Tagged value pairs for conveying additional information about the entity.",
        "path": "AuditEvent.entity.detail",
        "requirements": "Implementation-defined data about specific details of the object accessed or used.",
        "short": "Additional Information about the entity",
        "typeCode": "BackboneElement",
      },
    },
  ],
  "description": "A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.",
  "fhirCoreImports": [
    "BackboneElement",
    "Base64BinaryType",
    "BooleanType",
    "ChoiceDataTypes",
    "ChoiceDataTypesMeta",
    "CodeType",
    "DataType",
    "FhirDataTypeParser",
    "FhirError",
    "IBase",
    "INSTANCE_EMPTY_ERROR_MSG",
    "InstantType",
    "InvalidTypeError",
    "JSON",
    "PrimitiveType",
    "PrimitiveTypeJson",
    "REQUIRED_PROPERTIES_DO_NOT_EXIST",
    "REQUIRED_PROPERTIES_REQD_IN_JSON",
    "StringType",
    "UriType",
    "assertFhirType",
    "assertFhirTypeList",
    "assertIsDefined",
    "assertIsDefinedList",
    "copyListValues",
    "fhirBase64Binary",
    "fhirBase64BinarySchema",
    "fhirBoolean",
    "fhirBooleanSchema",
    "fhirCode",
    "fhirCodeSchema",
    "fhirInstant",
    "fhirInstantSchema",
    "fhirString",
    "fhirStringSchema",
    "fhirUri",
    "fhirUriSchema",
    "getPrimitiveTypeJson",
    "getPrimitiveTypeListJson",
    "isDefined",
    "isDefinedList",
    "isElementEmpty",
    "isEmpty",
    "parseBase64BinaryType",
    "parseBooleanType",
    "parseCodeType",
    "parseFhirPrimitiveData",
    "parseInstantType",
    "parseStringType",
    "parseUriType",
    "setFhirBackboneElementJson",
    "setFhirBackboneElementListJson",
    "setFhirComplexJson",
    "setFhirComplexListJson",
    "setFhirPrimitiveJson",
    "setFhirPrimitiveListJson",
    "setPolymorphicValueJson",
  ],
  "fhirVersion": "4.0.1",
  "generatedImports": [
    "CodeableConcept",
    "Coding",
    "DomainResource",
    "FhirResourceParser",
    "FhirResourceType",
    "PARSABLE_DATATYPE_MAP",
    "Period",
    "Reference",
    "ReferenceTargets",
  ],
  "hasChildComponents": true,
  "kind": "resource",
  "name": "AuditEvent",
  "parentComponent": {
    "baseDefinitionType": "DomainResource",
    "componentName": "AuditEvent",
    "elementDefinitions": [
      {
        "cardinality": "1..1",
        "comment": undefined,
        "definition": "Identifier for a family of the event.  For example, a menu item, program, rule, policy, function code, application name or URL. It identifies the performed function.",
        "fieldIdentifierName": "type_",
        "fieldName": "type",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": true,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": false,
        "isOptionalList": false,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": true,
        "isRequiredItem": true,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 1,
        "path": "AuditEvent.type",
        "requirements": "This identifies the performed function. For "Execute" Event Action Code audit records, this identifies the application function performed.",
        "short": "Type/identifier of event",
        "type": {
          "code": "Coding",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "Coding",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..*",
        "comment": undefined,
        "definition": "Identifier for the category of event.",
        "fieldIdentifierName": "subtype",
        "fieldName": "subtype",
        "isArray": true,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": true,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": false,
        "isOptionalList": true,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "*",
        "min": 0,
        "path": "AuditEvent.subtype",
        "requirements": "This field enables queries of messages by implementation-defined event categories.",
        "short": "More specific type/id for the event",
        "type": {
          "code": "Coding",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "Coding",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..1",
        "comment": undefined,
        "definition": "Indicator for type of action performed during the event that generated the audit.",
        "fieldIdentifierName": "action",
        "fieldName": "action",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": false,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": true,
        "isOptionalList": false,
        "isPrimitiveType": true,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 0,
        "path": "AuditEvent.action",
        "requirements": "This broadly indicates what kind of action was done on the AuditEvent.entity by the AuditEvent.agent.",
        "short": "Type of action performed during the event",
        "type": {
          "code": "CodeType",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "code",
          "primitiveJsonType": "string",
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..1",
        "comment": "The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.",
        "definition": "The period during which the activity occurred.",
        "fieldIdentifierName": "period",
        "fieldName": "period",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": true,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": true,
        "isOptionalList": false,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": false,
        "max": "1",
        "min": 0,
        "path": "AuditEvent.period",
        "requirements": undefined,
        "short": "When the activity occurred",
        "type": {
          "code": "Period",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "Period",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "1..1",
        "comment": "In a distributed system, some sort of common time base (e.g. an NTP [RFC1305] server) is a good implementation tactic.",
        "definition": "The time when the event was recorded.",
        "fieldIdentifierName": "recorded",
        "fieldName": "recorded",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": false,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": false,
        "isOptionalList": false,
        "isPrimitiveType": true,
        "isReferenceType": false,
        "isRequired": true,
        "isRequiredItem": true,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 1,
        "path": "AuditEvent.recorded",
        "requirements": "This ties an event to a specific date and time. Security audits typically require a consistent time base (e.g. UTC), to eliminate time-zone issues arising from geographical distribution.",
        "short": "Time when the event was recorded",
        "type": {
          "code": "InstantType",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "instant",
          "primitiveJsonType": "string",
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..1",
        "comment": "In some cases a "success" may be partial, for example, an incomplete or interrupted transfer of a radiological study. For the purpose of establishing accountability, these distinctions are not relevant.",
        "definition": "Indicates whether the event succeeded or failed.",
        "fieldIdentifierName": "outcome",
        "fieldName": "outcome",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": false,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": true,
        "isOptionalList": false,
        "isPrimitiveType": true,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 0,
        "path": "AuditEvent.outcome",
        "requirements": undefined,
        "short": "Whether the event succeeded or failed",
        "type": {
          "code": "CodeType",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "code",
          "primitiveJsonType": "string",
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..1",
        "comment": undefined,
        "definition": "A free text description of the outcome of the event.",
        "fieldIdentifierName": "outcomeDesc",
        "fieldName": "outcomeDesc",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": false,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": true,
        "isOptionalList": false,
        "isPrimitiveType": true,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 0,
        "path": "AuditEvent.outcomeDesc",
        "requirements": undefined,
        "short": "Description of the event outcome",
        "type": {
          "code": "StringType",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "string",
          "primitiveJsonType": "string",
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..*",
        "comment": "Use AuditEvent.agent.purposeOfUse when you know that it is specific to the agent, otherwise use AuditEvent.purposeOfEvent. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.",
        "definition": "The purposeOfUse (reason) that was used during the event being recorded.",
        "fieldIdentifierName": "purposeOfEvent",
        "fieldName": "purposeOfEvent",
        "isArray": true,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": true,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": false,
        "isOptionalList": true,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "*",
        "min": 0,
        "path": "AuditEvent.purposeOfEvent",
        "requirements": undefined,
        "short": "The purposeOfUse of the event",
        "type": {
          "code": "CodeableConcept",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "CodeableConcept",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "1..*",
        "comment": "Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity. For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.",
        "definition": "An actor taking an active role in the event or activity that is logged.",
        "fieldIdentifierName": "agent",
        "fieldName": "agent",
        "isArray": true,
        "isBackboneType": true,
        "isChoiceType": false,
        "isComplexType": false,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": false,
        "isOptionalList": false,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": true,
        "isRequiredItem": false,
        "isRequiredList": true,
        "isResourceType": false,
        "isSummary": false,
        "max": "*",
        "min": 1,
        "path": "AuditEvent.agent",
        "requirements": "An agent can be a person, an organization, software, device, or other actors that may be ascribed responsibility.",
        "short": "Actor involved in the event",
        "type": {
          "code": "AuditEventAgentComponent",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "BackboneElement",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "1..1",
        "comment": "Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.",
        "definition": "The system that is reporting the event.",
        "fieldIdentifierName": "source",
        "fieldName": "source",
        "isArray": false,
        "isBackboneType": true,
        "isChoiceType": false,
        "isComplexType": false,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": false,
        "isOptionalList": false,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": true,
        "isRequiredItem": true,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": false,
        "max": "1",
        "min": 1,
        "path": "AuditEvent.source",
        "requirements": "The event is reported by one source.",
        "short": "Audit Event Reporter",
        "type": {
          "code": "AuditEventSourceComponent",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "BackboneElement",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..*",
        "comment": "Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.",
        "definition": "Specific instances of data or objects that have been accessed.",
        "fieldIdentifierName": "entity",
        "fieldName": "entity",
        "isArray": true,
        "isBackboneType": true,
        "isChoiceType": false,
        "isComplexType": false,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": false,
        "isOptionalList": true,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": false,
        "max": "*",
        "min": 0,
        "path": "AuditEvent.entity",
        "requirements": "The event may have other entities involved.",
        "short": "Data or objects used",
        "type": {
          "code": "AuditEventEntityComponent",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "BackboneElement",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
    ],
    "fhirCoreImports": [
      "CodeType",
      "FhirDataTypeParser",
      "FhirError",
      "IBase",
      "INSTANCE_EMPTY_ERROR_MSG",
      "InstantType",
      "JSON",
      "PrimitiveType",
      "REQUIRED_PROPERTIES_DO_NOT_EXIST",
      "REQUIRED_PROPERTIES_REQD_IN_JSON",
      "StringType",
      "assertFhirType",
      "assertFhirTypeList",
      "assertIsDefined",
      "assertIsDefinedList",
      "copyListValues",
      "fhirCode",
      "fhirCodeSchema",
      "fhirInstant",
      "fhirInstantSchema",
      "fhirString",
      "fhirStringSchema",
      "getPrimitiveTypeJson",
      "isDefined",
      "isDefinedList",
      "isElementEmpty",
      "isEmpty",
      "parseCodeType",
      "parseFhirPrimitiveData",
      "parseInstantType",
      "parseStringType",
      "setFhirBackboneElementJson",
      "setFhirBackboneElementListJson",
      "setFhirComplexJson",
      "setFhirComplexListJson",
      "setFhirPrimitiveJson",
    ],
    "generatedImports": [
      "CodeableConcept",
      "Coding",
      "DomainResource",
      "FhirResourceParser",
      "FhirResourceType",
      "PARSABLE_DATATYPE_MAP",
      "Period",
    ],
    "hasChoiceFields": false,
    "hasCodeSystemEnums": false,
    "hasOnlyOnePrimitiveField": false,
    "hasParsableDataType": true,
    "hasPrimitiveFields": true,
    "hasRequiredFields": true,
    "hasResourceFields": false,
    "isComponentBackboneElement": false,
    "isComponentBackboneType": false,
    "isComponentDataType": false,
    "isComponentDomainResource": true,
    "isComponentElement": false,
    "isComponentResource": false,
    "numRequiredFields": 4,
    "parentFieldName": "AuditEvent",
    "parentKind": "resource",
    "parentName": "AuditEvent",
    "parentType": "AuditEvent",
    "parentUrl": "http://hl7.org/fhir/StructureDefinition/AuditEvent",
    "requiredConstructor": true,
    "rootElement": {
      "comment": "Based on IHE-ATNA.",
      "definition": "A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.",
      "requirements": undefined,
      "short": "Event record kept for security purposes",
    },
  },
  "purpose": undefined,
  "type": "AuditEvent",
  "url": "http://hl7.org/fhir/StructureDefinition/AuditEvent",
}
`;

exports[`src/generator-lib/templates/utils-hbs getSdHbsProperties should return the correct properties for StructureDefinition-Dosage 1`] = `
{
  "baseDefinitionType": "BackboneType",
  "childComponents": [
    {
      "baseDefinitionType": "Element",
      "componentName": "DosageDoseAndRateComponent",
      "elementDefinitions": [
        {
          "cardinality": "0..1",
          "comment": undefined,
          "definition": "The kind of dose or rate specified, for example, ordered or calculated.",
          "fieldIdentifierName": "type_",
          "fieldName": "type",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": false,
          "isComplexType": true,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": false,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": true,
          "max": "1",
          "min": 0,
          "path": "Dosage.doseAndRate.type",
          "requirements": "If the type is not populated, assume to be "ordered".",
          "short": "The kind of dose or rate specified",
          "type": {
            "code": "CodeableConcept",
            "codeSystemEnumName": undefined,
            "codeSystemName": undefined,
            "fhirDataType": "CodeableConcept",
            "primitiveJsonType": undefined,
            "targetProfile": undefined,
            "targetResource": undefined,
          },
        },
        {
          "cardinality": "0..1",
          "comment": "Note that this specifies the quantity of the specified medication, not the quantity for each active ingredient(s). Each ingredient amount can be communicated in the Medication resource. For example, if one wants to communicate that a tablet was 375 mg, where the dose was one tablet, you can use the Medication resource to document that the tablet was comprised of 375 mg of drug XYZ. Alternatively if the dose was 375 mg, then you may only need to use the Medication resource to indicate this was a tablet. If the example were an IV such as dopamine and you wanted to communicate that 400mg of dopamine was mixed in 500 ml of some IV solution, then this would all be communicated in the Medication resource. If the administration is not intended to be instantaneous (rate is present or timing has a duration), this can be specified to convey the total amount to be administered over the period of time as indicated by the schedule e.g. 500 ml in dose, with timing used to convey that this should be done over 4 hours.",
          "definition": "Amount of medication per dose.",
          "fieldIdentifierName": "dose",
          "fieldName": "dose",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": true,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": false,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": true,
          "max": "1",
          "min": 0,
          "path": "Dosage.doseAndRate.dose[x]",
          "requirements": "The amount of therapeutic or other substance given at one administration event.",
          "short": "Amount of medication per dose",
          "type": {
            "choiceDataTypes": [
              "Range",
              "Quantity",
            ],
            "choiceTypes": [
              "Range",
              "Quantity",
            ],
            "code": "DataType",
            "fhirDataType": "CHOICE",
          },
        },
        {
          "cardinality": "0..1",
          "comment": "It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate. It is possible to specify a rate over time (for example, 100 ml/hour) using either the rateRatio and rateQuantity.  The rateQuantity approach requires systems to have the capability to parse UCUM grammer where ml/hour is included rather than a specific ratio where the time is specified as the denominator.  Where a rate such as 500ml over 2 hours is specified, the use of rateRatio may be more semantically correct than specifying using a rateQuantity of 250 mg/hour.",
          "definition": "Amount of medication per unit of time.",
          "fieldIdentifierName": "rate",
          "fieldName": "rate",
          "isArray": false,
          "isBackboneType": false,
          "isChoiceType": true,
          "isComplexType": false,
          "isEnumCodeType": false,
          "isModifier": false,
          "isModifierReason": undefined,
          "isOptionalItem": true,
          "isOptionalList": false,
          "isPrimitiveType": false,
          "isReferenceType": false,
          "isRequired": false,
          "isRequiredItem": false,
          "isRequiredList": false,
          "isResourceType": false,
          "isSummary": true,
          "max": "1",
          "min": 0,
          "path": "Dosage.doseAndRate.rate[x]",
          "requirements": "Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.  Sometimes, a rate can imply duration when expressed as total volume / duration (e.g.  500mL/2 hours implies a duration of 2 hours).  However, when rate doesn\\'t imply duration (e.g. 250mL/hour), then the timing.repeat.duration is needed to convey the infuse over time period.",
          "short": "Amount of medication per unit of time",
          "type": {
            "choiceDataTypes": [
              "Ratio",
              "Range",
              "Quantity",
            ],
            "choiceTypes": [
              "Ratio",
              "Range",
              "Quantity",
            ],
            "code": "DataType",
            "fhirDataType": "CHOICE",
          },
        },
      ],
      "fhirCoreImports": [
        "ChoiceDataTypes",
        "ChoiceDataTypesMeta",
        "DataType",
        "Element",
        "FhirDataTypeParser",
        "IBase",
        "INSTANCE_EMPTY_ERROR_MSG",
        "InvalidTypeError",
        "JSON",
        "assertFhirType",
        "assertIsDefined",
        "isDefined",
        "isElementEmpty",
        "isEmpty",
        "setFhirComplexJson",
        "setPolymorphicValueJson",
      ],
      "generatedImports": [
        "CodeableConcept",
        "PARSABLE_DATATYPE_MAP",
        "Quantity",
        "Range",
        "Ratio",
      ],
      "hasChoiceFields": true,
      "hasCodeSystemEnums": false,
      "hasOnlyOnePrimitiveField": false,
      "hasParsableDataType": true,
      "hasPrimitiveFields": false,
      "hasRequiredFields": false,
      "hasResourceFields": false,
      "isComponentBackboneElement": false,
      "isComponentBackboneType": false,
      "isComponentDataType": false,
      "isComponentDomainResource": false,
      "isComponentElement": true,
      "isComponentResource": false,
      "numRequiredFields": 0,
      "parentFieldName": "Dosage.doseAndRate",
      "parentKind": "complex-type",
      "parentName": "Dosage",
      "parentType": "Dosage",
      "parentUrl": "http://hl7.org/fhir/StructureDefinition/Dosage",
      "requiredConstructor": false,
      "rootElement": {
        "comment": undefined,
        "componentLevel": 2,
        "componentName": "DosageDoseAndRateComponent",
        "definition": "The amount of medication administered.",
        "path": "Dosage.doseAndRate",
        "requirements": undefined,
        "short": "Amount of medication administered",
        "typeCode": "Element",
      },
    },
  ],
  "description": "Base StructureDefinition for Dosage Type: Indicates how the medication is/was taken or should be taken by the patient.",
  "fhirCoreImports": [
    "BackboneType",
    "BooleanType",
    "ChoiceDataTypes",
    "ChoiceDataTypesMeta",
    "DataType",
    "Element",
    "FhirDataTypeParser",
    "IBase",
    "INSTANCE_EMPTY_ERROR_MSG",
    "IntegerType",
    "InvalidTypeError",
    "JSON",
    "StringType",
    "assertFhirType",
    "assertFhirTypeList",
    "assertIsDefined",
    "copyListValues",
    "fhirInteger",
    "fhirIntegerSchema",
    "fhirString",
    "fhirStringSchema",
    "getPrimitiveTypeJson",
    "isDefined",
    "isDefinedList",
    "isElementEmpty",
    "isEmpty",
    "parseFhirPrimitiveData",
    "parseIntegerType",
    "parseStringType",
    "setFhirComplexJson",
    "setFhirComplexListJson",
    "setFhirPrimitiveJson",
    "setPolymorphicValueJson",
  ],
  "fhirVersion": "4.0.1",
  "generatedImports": [
    "CodeableConcept",
    "PARSABLE_DATATYPE_MAP",
    "Quantity",
    "Range",
    "Ratio",
    "Timing",
  ],
  "hasChildComponents": true,
  "kind": "complex-type",
  "name": "Dosage",
  "parentComponent": {
    "baseDefinitionType": "BackboneType",
    "componentName": "Dosage",
    "elementDefinitions": [
      {
        "cardinality": "0..1",
        "comment": undefined,
        "definition": "Indicates the order in which the dosage instructions should be applied or interpreted.",
        "fieldIdentifierName": "sequence",
        "fieldName": "sequence",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": false,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": true,
        "isOptionalList": false,
        "isPrimitiveType": true,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 0,
        "path": "Dosage.sequence",
        "requirements": "If the sequence number of multiple Dosages is the same, then it is implied that the instructions are to be treated as concurrent.  If the sequence number is different, then the Dosages are intended to be sequential.",
        "short": "The order of the dosage instructions",
        "type": {
          "code": "IntegerType",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "integer",
          "primitiveJsonType": "number",
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..1",
        "comment": undefined,
        "definition": "Free text dosage instructions e.g. SIG.",
        "fieldIdentifierName": "text",
        "fieldName": "text",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": false,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": true,
        "isOptionalList": false,
        "isPrimitiveType": true,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 0,
        "path": "Dosage.text",
        "requirements": "Free text dosage instructions can be used for cases where the instructions are too complex to code.  The content of this attribute does not include the name or description of the medication. When coded instructions are present, the free text instructions may still be present for display to humans taking or administering the medication. It is expected that the text instructions will always be populated.  If the dosage.timing attribute is also populated, then the dosage.text should reflect the same information as the timing.  Additional information about administration or preparation of the medication should be included as text.",
        "short": "Free text dosage instructions e.g. SIG",
        "type": {
          "code": "StringType",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "string",
          "primitiveJsonType": "string",
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..*",
        "comment": "Information about administration or preparation of the medication (e.g. "infuse as rapidly as possibly via intraperitoneal port" or "immediately following drug x") should be populated in dosage.text.",
        "definition": "Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").",
        "fieldIdentifierName": "additionalInstruction",
        "fieldName": "additionalInstruction",
        "isArray": true,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": true,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": false,
        "isOptionalList": true,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "*",
        "min": 0,
        "path": "Dosage.additionalInstruction",
        "requirements": "Additional instruction is intended to be coded, but where no code exists, the element could include text.  For example, "Swallow with plenty of water" which might or might not be coded.",
        "short": "Supplemental instruction or warnings to the patient - e.g. "with meals", "may cause drowsiness"",
        "type": {
          "code": "CodeableConcept",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "CodeableConcept",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..1",
        "comment": undefined,
        "definition": "Instructions in terms that are understood by the patient or consumer.",
        "fieldIdentifierName": "patientInstruction",
        "fieldName": "patientInstruction",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": false,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": true,
        "isOptionalList": false,
        "isPrimitiveType": true,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 0,
        "path": "Dosage.patientInstruction",
        "requirements": undefined,
        "short": "Patient or consumer oriented instructions",
        "type": {
          "code": "StringType",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "string",
          "primitiveJsonType": "string",
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..1",
        "comment": "This attribute might not always be populated while the Dosage.text is expected to be populated.  If both are populated, then the Dosage.text should reflect the content of the Dosage.timing.",
        "definition": "When medication should be administered.",
        "fieldIdentifierName": "timing",
        "fieldName": "timing",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": true,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": true,
        "isOptionalList": false,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 0,
        "path": "Dosage.timing",
        "requirements": "The timing schedule for giving the medication to the patient. This  data type allows many different expressions. For example: "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".  Sometimes, a rate can imply duration when expressed as total volume / duration (e.g.  500mL/2 hours implies a duration of 2 hours).  However, when rate doesn\\'t imply duration (e.g. 250mL/hour), then the timing.repeat.duration is needed to convey the infuse over time period.",
        "short": "When medication should be administered",
        "type": {
          "code": "Timing",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "Timing",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..1",
        "comment": "Can express "as needed" without a reason by setting the Boolean = True.  In this case the CodeableConcept is not populated.  Or you can express "as needed" with a reason by including the CodeableConcept.  In this case the Boolean is assumed to be True.  If you set the Boolean to False, then the dose is given according to the schedule and is not "prn" or "as needed".",
        "definition": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).",
        "fieldIdentifierName": "asNeeded",
        "fieldName": "asNeeded",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": true,
        "isComplexType": false,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": true,
        "isOptionalList": false,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 0,
        "path": "Dosage.asNeeded[x]",
        "requirements": undefined,
        "short": "Take "as needed" (for x)",
        "type": {
          "choiceDataTypes": [
            "BooleanType",
            "CodeableConcept",
          ],
          "choiceTypes": [
            "boolean",
            "CodeableConcept",
          ],
          "code": "DataType",
          "fhirDataType": "CHOICE",
        },
      },
      {
        "cardinality": "0..1",
        "comment": "If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [bodySite](https://hl7.org/fhir/extension-bodysite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.",
        "definition": "Body site to administer to.",
        "fieldIdentifierName": "site",
        "fieldName": "site",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": true,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": true,
        "isOptionalList": false,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 0,
        "path": "Dosage.site",
        "requirements": "A coded specification of the anatomic site where the medication first enters the body.",
        "short": "Body site to administer to",
        "type": {
          "code": "CodeableConcept",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "CodeableConcept",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..1",
        "comment": undefined,
        "definition": "How drug should enter body.",
        "fieldIdentifierName": "route",
        "fieldName": "route",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": true,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": true,
        "isOptionalList": false,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 0,
        "path": "Dosage.route",
        "requirements": "A code specifying the route or physiological path of administration of a therapeutic agent into or onto a patient\\'s body.",
        "short": "How drug should enter body",
        "type": {
          "code": "CodeableConcept",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "CodeableConcept",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..1",
        "comment": "Terminologies used often pre-coordinate this term with the route and or form of administration.",
        "definition": "Technique for administering medication.",
        "fieldIdentifierName": "method",
        "fieldName": "method",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": true,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": true,
        "isOptionalList": false,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 0,
        "path": "Dosage.method",
        "requirements": "A coded value indicating the method by which the medication is introduced into or onto the body. Most commonly used for injections.  For examples, Slow Push; Deep IV.",
        "short": "Technique for administering medication",
        "type": {
          "code": "CodeableConcept",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "CodeableConcept",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..*",
        "comment": undefined,
        "definition": "The amount of medication administered.",
        "fieldIdentifierName": "doseAndRate",
        "fieldName": "doseAndRate",
        "isArray": true,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": true,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": false,
        "isOptionalList": true,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "*",
        "min": 0,
        "path": "Dosage.doseAndRate",
        "requirements": undefined,
        "short": "Amount of medication administered",
        "type": {
          "code": "DosageDoseAndRateComponent",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "Element",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..1",
        "comment": "This is intended for use as an adjunct to the dosage when there is an upper cap.  For example "2 tablets every 4 hours to a maximum of 8/day".",
        "definition": "Upper limit on medication per unit of time.",
        "fieldIdentifierName": "maxDosePerPeriod",
        "fieldName": "maxDosePerPeriod",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": true,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": true,
        "isOptionalList": false,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 0,
        "path": "Dosage.maxDosePerPeriod",
        "requirements": "The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time.  For example, 1000mg in 24 hours.",
        "short": "Upper limit on medication per unit of time",
        "type": {
          "code": "Ratio",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "Ratio",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..1",
        "comment": "This is intended for use as an adjunct to the dosage when there is an upper cap.  For example, a body surface area related dose with a maximum amount, such as 1.5 mg/m2 (maximum 2 mg) IV over 5 - 10 minutes would have doseQuantity of 1.5 mg/m2 and maxDosePerAdministration of 2 mg.",
        "definition": "Upper limit on medication per administration.",
        "fieldIdentifierName": "maxDosePerAdministration",
        "fieldName": "maxDosePerAdministration",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": true,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": true,
        "isOptionalList": false,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 0,
        "path": "Dosage.maxDosePerAdministration",
        "requirements": "The maximum total quantity of a therapeutic substance that may be administered to a subject per administration.",
        "short": "Upper limit on medication per administration",
        "type": {
          "code": "Quantity",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "Quantity",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "0..1",
        "comment": undefined,
        "definition": "Upper limit on medication per lifetime of the patient.",
        "fieldIdentifierName": "maxDosePerLifetime",
        "fieldName": "maxDosePerLifetime",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": true,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": true,
        "isOptionalList": false,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": false,
        "isRequiredItem": false,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": true,
        "max": "1",
        "min": 0,
        "path": "Dosage.maxDosePerLifetime",
        "requirements": "The maximum total quantity of a therapeutic substance that may be administered per lifetime of the subject.",
        "short": "Upper limit on medication per lifetime of the patient",
        "type": {
          "code": "Quantity",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "Quantity",
          "primitiveJsonType": undefined,
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
    ],
    "fhirCoreImports": [
      "BackboneType",
      "BooleanType",
      "ChoiceDataTypes",
      "ChoiceDataTypesMeta",
      "DataType",
      "FhirDataTypeParser",
      "IBase",
      "INSTANCE_EMPTY_ERROR_MSG",
      "IntegerType",
      "InvalidTypeError",
      "JSON",
      "StringType",
      "assertFhirType",
      "assertFhirTypeList",
      "assertIsDefined",
      "copyListValues",
      "fhirInteger",
      "fhirIntegerSchema",
      "fhirString",
      "fhirStringSchema",
      "getPrimitiveTypeJson",
      "isDefined",
      "isDefinedList",
      "isElementEmpty",
      "isEmpty",
      "parseFhirPrimitiveData",
      "parseIntegerType",
      "parseStringType",
      "setFhirComplexJson",
      "setFhirComplexListJson",
      "setFhirPrimitiveJson",
      "setPolymorphicValueJson",
    ],
    "generatedImports": [
      "CodeableConcept",
      "PARSABLE_DATATYPE_MAP",
      "Quantity",
      "Ratio",
      "Timing",
    ],
    "hasChoiceFields": true,
    "hasCodeSystemEnums": false,
    "hasOnlyOnePrimitiveField": false,
    "hasParsableDataType": true,
    "hasPrimitiveFields": true,
    "hasRequiredFields": false,
    "hasResourceFields": false,
    "isComponentBackboneElement": false,
    "isComponentBackboneType": true,
    "isComponentDataType": false,
    "isComponentDomainResource": false,
    "isComponentElement": false,
    "isComponentResource": false,
    "numRequiredFields": 0,
    "parentFieldName": "Dosage",
    "parentKind": "complex-type",
    "parentName": "Dosage",
    "parentType": "Dosage",
    "parentUrl": "http://hl7.org/fhir/StructureDefinition/Dosage",
    "requiredConstructor": false,
    "rootElement": {
      "comment": undefined,
      "definition": "Indicates how the medication is/was taken or should be taken by the patient.",
      "requirements": undefined,
      "short": "How the medication is/was taken or should be taken",
    },
  },
  "purpose": undefined,
  "type": "Dosage",
  "url": "http://hl7.org/fhir/StructureDefinition/Dosage",
}
`;

exports[`src/generator-lib/templates/utils-hbs getSdHbsProperties should return the correct properties for StructureDefinition-Narrative 1`] = `
{
  "baseDefinitionType": "DataType",
  "childComponents": undefined,
  "description": "Base StructureDefinition for Narrative Type: A human-readable summary of the resource conveying the essential clinical and business information for the resource.",
  "fhirCoreImports": [
    "CodeType",
    "DataType",
    "EnumCodeType",
    "FhirDataTypeParser",
    "FhirError",
    "IBase",
    "INSTANCE_EMPTY_ERROR_MSG",
    "JSON",
    "PrimitiveType",
    "REQUIRED_PROPERTIES_DO_NOT_EXIST",
    "REQUIRED_PROPERTIES_REQD_IN_JSON",
    "XhtmlType",
    "assertEnumCodeType",
    "assertFhirType",
    "assertIsDefined",
    "constructorCodeValueAsEnumCodeType",
    "fhirCode",
    "fhirCodeSchema",
    "fhirXhtml",
    "fhirXhtmlSchema",
    "getPrimitiveTypeJson",
    "isDefined",
    "isElementEmpty",
    "isEmpty",
    "parseCodeType",
    "parseFhirPrimitiveData",
    "parseXhtmlType",
    "setFhirPrimitiveJson",
  ],
  "fhirVersion": "4.0.1",
  "generatedImports": [
    "NarrativeStatusEnum",
    "PARSABLE_DATATYPE_MAP",
  ],
  "hasChildComponents": false,
  "kind": "complex-type",
  "name": "Narrative",
  "parentComponent": {
    "baseDefinitionType": "DataType",
    "componentName": "Narrative",
    "elementDefinitions": [
      {
        "cardinality": "1..1",
        "comment": undefined,
        "definition": "The status of the narrative - whether it\\'s entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.",
        "fieldIdentifierName": "status",
        "fieldName": "status",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": false,
        "isEnumCodeType": true,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": false,
        "isOptionalList": false,
        "isPrimitiveType": false,
        "isReferenceType": false,
        "isRequired": true,
        "isRequiredItem": true,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": false,
        "max": "1",
        "min": 1,
        "path": "Narrative.status",
        "requirements": undefined,
        "short": "generated | extensions | additional | empty",
        "type": {
          "code": "EnumCodeType",
          "codeSystemEnumName": "NarrativeStatusEnum",
          "codeSystemName": "NarrativeStatus",
          "fhirDataType": "code",
          "primitiveJsonType": "string",
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
      {
        "cardinality": "1..1",
        "comment": "The contents of the html element are an XHTML fragment containing only the basic html formatting elements described in chapters 7-11 and 15 of the HTML 4.0 standard, <a> elements (either name or href), images and internally contained stylesheets. The XHTML content SHALL NOT contain a head, a body, external stylesheet references, scripts, forms, base/link/xlink, frames, iframes and objects.",
        "definition": "The actual narrative content, a stripped down version of XHTML.",
        "fieldIdentifierName": "div",
        "fieldName": "div",
        "isArray": false,
        "isBackboneType": false,
        "isChoiceType": false,
        "isComplexType": false,
        "isEnumCodeType": false,
        "isModifier": false,
        "isModifierReason": undefined,
        "isOptionalItem": false,
        "isOptionalList": false,
        "isPrimitiveType": true,
        "isReferenceType": false,
        "isRequired": true,
        "isRequiredItem": true,
        "isRequiredList": false,
        "isResourceType": false,
        "isSummary": false,
        "max": "1",
        "min": 1,
        "path": "Narrative.div",
        "requirements": undefined,
        "short": "Limited xhtml content",
        "type": {
          "code": "XhtmlType",
          "codeSystemEnumName": undefined,
          "codeSystemName": undefined,
          "fhirDataType": "xhtml",
          "primitiveJsonType": "string",
          "targetProfile": undefined,
          "targetResource": undefined,
        },
      },
    ],
    "fhirCoreImports": [
      "CodeType",
      "DataType",
      "EnumCodeType",
      "FhirDataTypeParser",
      "FhirError",
      "IBase",
      "INSTANCE_EMPTY_ERROR_MSG",
      "JSON",
      "PrimitiveType",
      "REQUIRED_PROPERTIES_DO_NOT_EXIST",
      "REQUIRED_PROPERTIES_REQD_IN_JSON",
      "XhtmlType",
      "assertEnumCodeType",
      "assertFhirType",
      "assertIsDefined",
      "constructorCodeValueAsEnumCodeType",
      "fhirCode",
      "fhirCodeSchema",
      "fhirXhtml",
      "fhirXhtmlSchema",
      "getPrimitiveTypeJson",
      "isDefined",
      "isElementEmpty",
      "isEmpty",
      "parseCodeType",
      "parseFhirPrimitiveData",
      "parseXhtmlType",
      "setFhirPrimitiveJson",
    ],
    "generatedImports": [
      "NarrativeStatusEnum",
      "PARSABLE_DATATYPE_MAP",
    ],
    "hasChoiceFields": false,
    "hasCodeSystemEnums": true,
    "hasOnlyOnePrimitiveField": false,
    "hasParsableDataType": true,
    "hasPrimitiveFields": true,
    "hasRequiredFields": true,
    "hasResourceFields": false,
    "isComponentBackboneElement": false,
    "isComponentBackboneType": false,
    "isComponentDataType": true,
    "isComponentDomainResource": false,
    "isComponentElement": false,
    "isComponentResource": false,
    "numRequiredFields": 2,
    "parentFieldName": "Narrative",
    "parentKind": "complex-type",
    "parentName": "Narrative",
    "parentType": "Narrative",
    "parentUrl": "http://hl7.org/fhir/StructureDefinition/Narrative",
    "requiredConstructor": true,
    "rootElement": {
      "comment": undefined,
      "definition": "A human-readable summary of the resource conveying the essential clinical and business information for the resource.",
      "requirements": undefined,
      "short": "Human-readable summary of the resource (essential clinical and business information)",
    },
  },
  "purpose": undefined,
  "type": "Narrative",
  "url": "http://hl7.org/fhir/StructureDefinition/Narrative",
}
`;
