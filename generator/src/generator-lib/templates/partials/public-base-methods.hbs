{{!-- Public Base Methods Partial Template --}}
{{!-- context is a HbsElementComponent --}}
  /**
   * @returns the FHIR type defined in the FHIR standard
   */
  public override fhirType(): string {
    return '{{parentFieldName}}';
  }

  /**
   * @returns `true` if the instance is empty; `false` otherwise
   */
  public override isEmpty(): boolean {
    return super.isEmpty() && isElementEmpty(
  {{#each elementDefinitions}}
      this.{{this.fieldName}},
  {{/each}}
    );
  }

  /**
   * Creates a copy of the current instance.
   *
   * @returns the a new instance copied from the current instance
   */
  public override copy(): {{componentName}} {
    const dest = new {{componentName}}();
    this.copyValues(dest);
    return dest;
  }

  /**
   * Copies the current instance's elements into the provided object.
   *
   * @param dest - the copied instance
   * @protected
   */
  protected override copyValues(dest: {{componentName}}): void {
    super.copyValues(dest);
{{#each elementDefinitions}}
  {{#if this.isOptionalItem}}
    dest.{{this.fieldName}} = this.{{this.fieldName}}?.copy();
  {{/if}}
  {{#if this.isRequiredItem}}
    dest.{{this.fieldName}} = this.{{this.fieldName}} ? this.{{this.fieldName}}.copy() : null;
  {{/if}}
  {{#if this.isOptionalList}}
    const {{this.fieldName}}List = copyListValues<{{this.type.code}}>(this.{{this.fieldName}});
    dest.{{this.fieldName}} = {{this.fieldName}}List.length === 0 ? undefined : {{this.fieldName}}List;
  {{/if}}
  {{#if this.isRequiredList}}
    const {{this.fieldName}}List = copyListValues<{{this.type.code}}>(this.{{this.fieldName}});
    dest.{{this.fieldName}} = {{this.fieldName}}List.length === 0 ? null : {{this.fieldName}}List;
  {{/if}}
{{/each}}
  }
