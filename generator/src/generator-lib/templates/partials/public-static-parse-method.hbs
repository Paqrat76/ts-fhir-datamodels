{{!-- Public Static Parse Method Partial Template --}}
{{!-- context is a HbsElementComponent --}}
  /**
   * Parse the provided `{{componentName}}` JSON to instantiate the {{componentName}} data model.
   *
   * @param sourceJson - JSON representing FHIR `{{componentName}}`
   * @param optSourceField - Optional data source field (e.g. `<complexTypeName>.<complexTypeFieldName>`); defaults to {{componentName}}
   * @returns {{componentName}} data model or undefined for `{{componentName}}`
   */
  public static parse(sourceJson: JSON.Value, optSourceField?: string): {{componentName}} | undefined {
    if (!isDefined<JSON.Value>(sourceJson) || (JSON.isJsonObject(sourceJson) && isEmpty(sourceJson))) {
      return undefined;
    }

{{#if isComponentResource}}
    const fhirResourceParser = new FhirResourceParser(PARSABLE_DATATYPE_MAP);
{{/if}}
{{#if isComponentDomainResource}}
    const fhirResourceParser = new FhirResourceParser(PARSABLE_DATATYPE_MAP);
{{/if}}
{{#if hasResourceFields}}
    const fhirResourceParser = new FhirResourceParser(PARSABLE_DATATYPE_MAP);
{{/if}}
{{#if hasParsableDataType}}
    // hasParsableDataType: {{hasParsableDataType}}
    const fhirDataTypeParser = new FhirDataTypeParser(PARSABLE_DATATYPE_MAP);
{{else}}
    // hasParsableDataType: {{hasParsableDataType}}
{{/if}}

    const optSourceValue = isDefined<string>(optSourceField) ? optSourceField : '{{componentName}}';
    const classJsonObj: JSON.Object = JSON.asObject(sourceJson, `${optSourceValue} JSON`);
    const instance = new {{componentName}}();
{{#if isComponentResource}}
    fhirResourceParser.processResourceJson(instance, classJsonObj);
{{/if}}
{{#if isComponentDomainResource}}
    fhirResourceParser.processDomainResourceJson(instance, classJsonObj);
{{/if}}
{{#if isComponentBackboneElement}}
    fhirDataTypeParser.processBackboneElementJson(instance, classJsonObj);
{{/if}}
{{#if isComponentDataType}}
    fhirDataTypeParser.processElementJson(instance, classJsonObj);
{{/if}}
{{#if isComponentBackboneType}}
    fhirDataTypeParser.processBackboneTypeJson(instance, classJsonObj);
{{/if}}
{{#if isComponentElement}}
    fhirDataTypeParser.processElementJson(instance, classJsonObj);
{{/if}}

    let fieldName = '';
    let sourceField = '';
{{#if hasPrimitiveFields}}
    {{#unless hasOnlyOnePrimitiveField}}let primitiveJsonType: 'boolean' | 'number' | 'string' = 'string';{{/unless}}
{{/if}}

{{#if hasChoiceFields}}
    const classMetadata: DecoratorMetadataObject | null = {{componentName}}[Symbol.metadata];
    const errorMessage = `DecoratorMetadataObject does not exist for {{componentName}}`;
    assertIsDefined<DecoratorMetadataObject>(classMetadata, errorMessage);

{{/if}}
{{#if hasRequiredFields}}
    const missingReqdProperties: string[] = [];

{{/if}}
{{#each elementDefinitions}}
{{#if this.isBackboneType}}
{{#if this.isOptionalItem}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const component: {{this.type.code}} | undefined = {{this.type.code}}.parse(classJsonObj[fieldName]!, sourceField);
      instance.set{{upperFirst this.fieldName}}(component);
    }

{{/if}}
{{#if this.isRequiredItem}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const component: {{this.type.code}} | undefined = {{this.type.code}}.parse(classJsonObj[fieldName]!, sourceField);
      if (component === undefined) {
        missingReqdProperties.push(sourceField);
      } else {
        instance.set{{upperFirst this.fieldName}}(component);
      }
    } else {
      missingReqdProperties.push(sourceField);
    }

{{/if}}
{{#if this.isOptionalList}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const componentJsonArray: JSON.Array = JSON.asArray(classJsonObj[fieldName]!, sourceField);
      componentJsonArray.forEach((componentJson: JSON.Value, idx) => {
        const component: {{this.type.code}} | undefined = {{this.type.code}}.parse(componentJson, `${sourceField}[${String(idx)}]`);
        if (component !== undefined) {
          instance.add{{upperFirst this.fieldName}}(component);
        }
      });
    }

{{/if}}
{{#if this.isRequiredList}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const componentJsonArray: JSON.Array = JSON.asArray(classJsonObj[fieldName]!, sourceField);
      componentJsonArray.forEach((componentJson: JSON.Value, idx) => {
        const component: {{this.type.code}} | undefined = {{this.type.code}}.parse(componentJson, `${sourceField}[${String(idx)}]`);
        if (component === undefined) {
          missingReqdProperties.push(`${sourceField}[${String(idx)}]`);
        } else {
          instance.add{{upperFirst this.fieldName}}(component);
        }
      });
    } else {
      missingReqdProperties.push(sourceField);
    }

{{/if}}
{{/if}}
{{#if this.isChoiceType}}
{{#if this.isOptionalItem}}
    fieldName = '{{this.fieldName}}[x]';
    sourceField = `${optSourceValue}.${fieldName}`;
    const {{this.fieldName}}: DataType | undefined = fhirDataTypeParser.parsePolymorphicDataType(
      classJsonObj,
      sourceField,
      fieldName,
      classMetadata,
    );
    instance.set{{upperFirst this.fieldName}}({{this.fieldName}});

{{/if}}
{{#if this.isRequiredItem}}
    fieldName = '{{this.fieldName}}[x]';
    sourceField = `${optSourceValue}.${fieldName}`;
    const {{this.fieldName}}: DataType | undefined = fhirDataTypeParser.parsePolymorphicDataType(
      classJsonObj,
      sourceField,
      fieldName,
      classMetadata,
    );
    if ({{this.fieldName}} === undefined) {
      missingReqdProperties.push(sourceField);
    } else {
      instance.set{{upperFirst this.fieldName}}({{this.fieldName}});
    }

{{/if}}
{{/if}}
{{#if this.isComplexType}}
{{#if this.isOptionalItem}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const datatype: {{this.type.code}} | undefined = fhirDataTypeParser.parser<{{this.type.code}}>({{this.type.code}}, classJsonObj[fieldName]!, sourceField);
      instance.set{{upperFirst this.fieldName}}(datatype);
    }

{{/if}}
{{#if this.isRequiredItem}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const datatype: {{this.type.code}} | undefined = fhirDataTypeParser.parser<{{this.type.code}}>({{this.type.code}}, classJsonObj[fieldName]!, sourceField);
      if (datatype === undefined) {
        missingReqdProperties.push(sourceField);
      } else {
        instance.set{{upperFirst this.fieldName}}(datatype);
      }
    } else {
      missingReqdProperties.push(sourceField);
    }

{{/if}}
{{#if this.isOptionalList}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const dataElementJsonArray: JSON.Array = JSON.asArray(classJsonObj[fieldName]!, sourceField);
      dataElementJsonArray.forEach((dataElementJson: JSON.Value, idx) => {
        const datatype: {{this.type.code}} | undefined = fhirDataTypeParser.parser<{{this.type.code}}>({{this.type.code}}, dataElementJson, `${sourceField}[${String(idx)}]`);
        if (datatype !== undefined) {
          instance.add{{upperFirst this.fieldName}}(datatype);
        }
      });
    }

{{/if}}
{{#if this.isRequiredList}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const dataElementJsonArray: JSON.Array = JSON.asArray(classJsonObj[fieldName]!, sourceField);
      dataElementJsonArray.forEach((dataElementJson: JSON.Value, idx) => {
        const datatype: {{this.type.code}} | undefined = fhirDataTypeParser.parser<{{this.type.code}}>({{this.type.code}}, dataElementJson, `${sourceField}[${String(idx)}]`);
        if (datatype === undefined) {
          missingReqdProperties.push(`${sourceField}[${String(idx)}]`);
        } else {
          instance.add{{upperFirst this.fieldName}}(datatype);
        }
      });
    } else {
      missingReqdProperties.push(sourceField);
    }

{{/if}}
{{/if}}
{{#if this.isEnumCodeType}}
{{#if this.isOptionalItem}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    {{#if ../hasOnlyOnePrimitiveField}}const {{/if}}primitiveJsonType = 'string';
    if (fieldName in classJsonObj) {
      const { dtJson, dtSiblingJson } = getPrimitiveTypeJson(classJsonObj, sourceField, fieldName, primitiveJsonType);
      const datatype: CodeType | undefined = parseCodeType(dtJson, dtSiblingJson);
      instance.set{{upperFirst this.fieldName}}Element(datatype);
    }

{{/if}}
{{#if this.isRequiredItem}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    {{#if ../hasOnlyOnePrimitiveField}}const {{/if}}primitiveJsonType = 'string';
    if (fieldName in classJsonObj) {
      const { dtJson, dtSiblingJson } = getPrimitiveTypeJson(classJsonObj, sourceField, fieldName, primitiveJsonType);
      const datatype: CodeType | undefined = parseCodeType(dtJson, dtSiblingJson);
      if (datatype === undefined) {
        missingReqdProperties.push(sourceField);
      } else {
        instance.set{{upperFirst this.fieldName}}Element(datatype);
      }
    } else {
      missingReqdProperties.push(sourceField);
    }

{{/if}}
{{#if this.isOptionalList}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    {{#if ../hasOnlyOnePrimitiveField}}const {{/if}}primitiveJsonType = 'string';
    if (fieldName in classJsonObj) {
      const dataJsonArray: PrimitiveTypeJson[] = getPrimitiveTypeListJson(
        classJsonObj,
        sourceField,
        fieldName,
        primitiveJsonType,
      );
      dataJsonArray.forEach((dataJson: PrimitiveTypeJson) => {
        const datatype: CodeType | undefined = parseCodeType(dataJson.dtJson, dataJson.dtSiblingJson);
        if (datatype !== undefined) {
          instance.add{{upperFirst this.fieldName}}Element(datatype);
        }
      });
    }

{{/if}}
{{#if this.isRequiredList}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    {{#if ../hasOnlyOnePrimitiveField}}const {{/if}}primitiveJsonType = 'string';
    if (fieldName in classJsonObj) {
      const dataJsonArray: PrimitiveTypeJson[] = getPrimitiveTypeListJson(
        classJsonObj,
        sourceField,
        fieldName,
        primitiveJsonType,
      );
      dataJsonArray.forEach((dataJson: PrimitiveTypeJson, idx) => {
        const datatype: CodeType | undefined = parseCodeType(dataJson.dtJson, dataJson.dtSiblingJson);
        if (datatype === undefined) {
          missingReqdProperties.push(`${sourceField}[${String(idx)}]`);
        } else {
          instance.add{{upperFirst this.fieldName}}Element(datatype);
        }
      });
    } else {
      missingReqdProperties.push(`XxxxParentClassElement.{{this.fieldName}}`);
    }

{{/if}}
{{/if}}
{{#if this.isPrimitiveType}}
{{#if this.isOptionalItem}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    {{#if ../hasOnlyOnePrimitiveField}}const {{/if}}primitiveJsonType = '{{this.type.primitiveJsonType}}';
    if (fieldName in classJsonObj) {
      const { dtJson, dtSiblingJson } = getPrimitiveTypeJson(classJsonObj, sourceField, fieldName, primitiveJsonType);
      const datatype: {{this.type.code}} | undefined = parse{{this.type.code}}(dtJson, dtSiblingJson);
      instance.set{{upperFirst this.fieldName}}Element(datatype);
    }

{{/if}}
{{#if this.isRequiredItem}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    {{#if ../hasOnlyOnePrimitiveField}}const {{/if}}primitiveJsonType = '{{this.type.primitiveJsonType}}';
    if (fieldName in classJsonObj) {
      const { dtJson, dtSiblingJson } = getPrimitiveTypeJson(classJsonObj, sourceField, fieldName, primitiveJsonType);
      const datatype: {{this.type.code}} | undefined = parse{{this.type.code}}(dtJson, dtSiblingJson);
      if (datatype === undefined) {
        missingReqdProperties.push(sourceField);
      } else {
        instance.set{{upperFirst this.fieldName}}Element(datatype);
      }
    } else {
      missingReqdProperties.push(sourceField);
    }

{{/if}}
{{#if this.isOptionalList}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    {{#if ../hasOnlyOnePrimitiveField}}const {{/if}}primitiveJsonType = '{{this.type.primitiveJsonType}}';
    if (fieldName in classJsonObj) {
      const dataJsonArray: PrimitiveTypeJson[] = getPrimitiveTypeListJson(
        classJsonObj,
        sourceField,
        fieldName,
        primitiveJsonType,
      );
      dataJsonArray.forEach((dataJson: PrimitiveTypeJson) => {
        const datatype: {{this.type.code}} | undefined = parse{{this.type.code}}(dataJson.dtJson, dataJson.dtSiblingJson);
        if (datatype !== undefined) {
          instance.add{{upperFirst this.fieldName}}Element(datatype);
        }
      });
    }

{{/if}}
{{#if this.isRequiredList}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    {{#if ../hasOnlyOnePrimitiveField}}const {{/if}}primitiveJsonType = '{{this.type.primitiveJsonType}}';
    if (fieldName in classJsonObj) {
      const dataJsonArray: PrimitiveTypeJson[] = getPrimitiveTypeListJson(
        classJsonObj,
        sourceField,
        fieldName,
        primitiveJsonType,
      );
      dataJsonArray.forEach((dataJson: PrimitiveTypeJson, idx) => {
        const datatype: {{this.type.code}} | undefined = parse{{this.type.code}}(dataJson.dtJson, dataJson.dtSiblingJson);
        if (datatype === undefined) {
          missingReqdProperties.push(`${sourceField}[${String(idx)}]`);
        } else {
          instance.add{{upperFirst this.fieldName}}Element(datatype);
        }
      });
    } else {
      missingReqdProperties.push(sourceField);
    }

{{/if}}
{{/if}}
{{#if this.isReferenceType}}
{{#if this.isOptionalItem}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const datatype: Reference | undefined = fhirDataTypeParser.parser<Reference>(Reference, classJsonObj[fieldName]!, sourceField);
      instance.set{{upperFirst this.fieldName}}(datatype);
    }

{{/if}}
{{#if this.isRequiredItem}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const datatype: Reference | undefined = fhirDataTypeParser.parser<Reference>(Reference, classJsonObj[fieldName]!, sourceField);
      if (datatype === undefined) {
        missingReqdProperties.push(sourceField);
      } else {
        instance.set{{upperFirst this.fieldName}}(datatype);
      }
    } else {
      missingReqdProperties.push(sourceField);
    }

{{/if}}
{{#if this.isOptionalList}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const dataElementJsonArray: JSON.Array = JSON.asArray(classJsonObj[fieldName]!, sourceField);
      dataElementJsonArray.forEach((dataElementJson: JSON.Value, idx) => {
        const datatype: Reference | undefined = fhirDataTypeParser.parser<Reference>(Reference, dataElementJson, `${sourceField}[${String(idx)}]`);
        if (datatype !== undefined) {
          instance.add{{upperFirst this.fieldName}}(datatype);
        }
      });
  }

{{/if}}
{{#if this.isRequiredList}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const dataElementJsonArray: JSON.Array = JSON.asArray(classJsonObj[fieldName]!, sourceField);
      dataElementJsonArray.forEach((dataElementJson: JSON.Value, idx) => {
        const datatype: Reference | undefined = fhirDataTypeParser.parser<Reference>(Reference, dataElementJson, `${sourceField}[${String(idx)}]`);
        if (datatype === undefined) {
          missingReqdProperties.push(`${sourceField}[${String(idx)}]`);
        } else {
          instance.add{{upperFirst this.fieldName}}(datatype);
        }
      });
    } else {
      missingReqdProperties.push(sourceField);
    }

{{/if}}
{{/if}}
{{#if this.isResourceType}}
{{#if this.isOptionalItem}}
    fieldName = '{{this.fieldName}}';
    sourceField = `${optSourceValue}.${fieldName}`;
    if (fieldName in classJsonObj) {
      const {{this.fieldName}}: Resource | undefined = fhirResourceParser.parseInlineResource(classJsonObj[fieldName], sourceField);
      instance.set{{upperFirst this.fieldName}}({{this.fieldName}});
    }

{{/if}}
{{/if}}
{{/each}}
{{#if hasRequiredFields}}
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_REQD_IN_JSON} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

{{/if}}
    assert(!instance.isEmpty(), INSTANCE_EMPTY_ERROR_MSG);
    return instance;
  }
