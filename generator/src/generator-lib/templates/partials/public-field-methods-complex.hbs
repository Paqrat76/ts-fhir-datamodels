{{!-- Public Field Methods for Complex Types Partial Template --}}
{{#if this.isOptionalItem}}
  /**
   * @returns the `{{edHbs.fieldName}}` property value as a {{edHbs.type.code}} object if defined; else an empty {{edHbs.type.code}} object
   */
  public get{{upperFirst edHbs.fieldName}}(): {{edHbs.type.code}} {
    return this.{{edHbs.fieldName}} ?? new {{edHbs.type.code}}();
  }

  /**
   * Assigns the provided {{upperFirst edHbs.fieldName}} object value to the `{{edHbs.fieldName}}` property.
   *
   * @param value - the `{{edHbs.fieldName}}` object value
   * @returns this
   */
  public set{{upperFirst edHbs.fieldName}}(value: {{edHbs.type.code}} | undefined): this {
    if (isDefined<{{edHbs.type.code}}>(value)) {
      const optErrMsg = `Invalid {{edHbs.path}}; Provided element is not an instance of {{edHbs.type.code}}.`;
      assertFhirType<{{edHbs.type.code}}>(value, {{edHbs.type.code}}, optErrMsg);
      this.{{edHbs.fieldName}} = value;
    } else {
      this.{{edHbs.fieldName}} = undefined;
    }
    return this;
  }

  /**
   * @returns `true` if the `{{edHbs.fieldName}}` property exists and has a value; `false` otherwise
   */
  public has{{upperFirst edHbs.fieldName}}(): boolean {
    return isDefined<{{edHbs.type.code}}>(this.{{edHbs.fieldName}}) && !this.{{edHbs.fieldName}}.isEmpty();
  }
{{/if}}
{{#if this.isRequiredItem}}
  /**
   * @returns the `{{edHbs.fieldName}}` property value as a {{edHbs.type.code}} object if defined; else null
   */
  public get{{upperFirst edHbs.fieldName}}(): {{edHbs.type.code}} | null {
    return this.{{edHbs.fieldName}};
  }

  /**
   * Assigns the provided {{edHbs.type.code}} object value to the `{{edHbs.fieldName}}` property.
   *
   * @param value - the `{{edHbs.fieldName}}` object value
   * @returns this
   */
  public set{{upperFirst edHbs.fieldName}}(value: {{edHbs.type.code}}): this {
    assertIsDefined<{{edHbs.type.code}}>(value, `{{edHbs.path}} is required`);
    const optErrMsg = `Invalid {{edHbs.path}}; Provided element is not an instance of {{edHbs.type.code}}.`;
    assertFhirType<{{edHbs.type.code}}>(value, {{edHbs.type.code}}, optErrMsg);
    this.{{edHbs.fieldName}} = value;
    return this;
  }

  /**
   * @returns `true` if the `{{edHbs.fieldName}}` property exists and has a value; `false` otherwise
   */
  public has{{upperFirst edHbs.fieldName}}(): boolean {
    return isDefined<{{edHbs.type.code}}>(this.{{edHbs.fieldName}}) && !this.{{edHbs.fieldName}}.isEmpty();
  }
{{/if}}
{{#if this.isOptionalList}}
  /**
   * @returns the `{{edHbs.fieldName}}` property value as a {{edHbs.type.code}} array
   */
  public get{{upperFirst edHbs.fieldName}}(): {{edHbs.type.code}}[] {
    return this.{{edHbs.fieldName}} ?? ([] as {{edHbs.type.code}}[]);
  }

  /**
   * Assigns the provided {{edHbs.type.code}} array value to the `{{edHbs.fieldName}}` property.
   *
   * @param value - the `{{edHbs.fieldName}}` array value
   * @returns this
   */
  public set{{upperFirst edHbs.fieldName}}(value: {{edHbs.type.code}}[] | undefined): this {
    if (isDefinedList<{{edHbs.type.code}}>(value)) {
      const optErrMsg = `Invalid {{edHbs.path}}; Provided value array has an element that is not an instance of {{edHbs.type.code}}.`;
      assertFhirTypeList<{{edHbs.type.code}}>(value, {{edHbs.type.code}}, optErrMsg);
      this.{{edHbs.fieldName}} = value;
    } else {
      this.{{edHbs.fieldName}} = undefined;
    }
    return this;
  }

  /**
   * Add the provided {{edHbs.type.code}} value to the `{{edHbs.fieldName}}` array property.
   *
   * @param value - the `{{edHbs.fieldName}}` value
   * @returns this
   */
  public add{{upperFirst edHbs.fieldName}}(value: {{edHbs.type.code}} | undefined): this {
    if (isDefined<{{edHbs.type.code}}>(value)) {
      const optErrMsg = `Invalid {{edHbs.path}}; Provided element is not an instance of {{edHbs.type.code}}.`;
      assertFhirType<{{edHbs.type.code}}>(value, {{edHbs.type.code}}, optErrMsg);
      this.init{{upperFirst edHbs.fieldName}}();
      this.{{edHbs.fieldName}}?.push(value);
    }
    return this;
  }

  /**
   * @returns `true` if the `{{edHbs.fieldName}}` property exists and has a value; `false` otherwise
   */
  public has{{upperFirst edHbs.fieldName}}(): boolean {
    return isDefinedList<{{edHbs.type.code}}>(this.{{edHbs.fieldName}}) && this.{{edHbs.fieldName}}.some((item: {{edHbs.type.code}}) => !item.isEmpty());
  }

  /**
   * Initialize the `{{edHbs.fieldName}}` property
   */
  private init{{upperFirst edHbs.fieldName}}(): void {
    if(!this.has{{upperFirst edHbs.fieldName}}()) {
      this.{{edHbs.fieldName}} = [] as {{edHbs.type.code}}[];
    }
  }
{{/if}}
{{#if this.isRequiredList}}
  /**
   * @returns the `{{edHbs.fieldName}}` property value as a {{edHbs.type.code}} array
   */
  public get{{upperFirst edHbs.fieldName}}(): {{edHbs.type.code}}[] {
    return this.{{edHbs.fieldName}} ?? ([] as {{edHbs.type.code}}[]);
  }

  /**
   * Assigns the provided {{edHbs.type.code}} array value to the `{{edHbs.fieldName}}` property.
   *
   * @param value - the `{{edHbs.fieldName}}` array value
   * @returns this
   */
  public set{{upperFirst edHbs.fieldName}}(value: {{edHbs.type.code}}[]): this {
    assertIsDefinedList<{{edHbs.type.code}}>(value, `{{edHbs.path}} is required`);
    const optErrMsg = `Invalid {{edHbs.path}}; Provided value array has an element that is not an instance of {{edHbs.type.code}}.`;
    assertFhirTypeList<{{edHbs.type.code}}>(value, {{edHbs.type.code}}, optErrMsg);
    this.{{edHbs.fieldName}} = value;
    return this;
  }

  /**
   * Add the provided {{edHbs.type.code}} value to the `{{edHbs.fieldName}}` array property.
   *
   * @param value - the `{{edHbs.fieldName}}` value
   * @returns this
   */
  public add{{upperFirst edHbs.fieldName}}(value: {{edHbs.type.code}} | undefined): this {
    if (isDefined<{{edHbs.type.code}}>(value)) {
      const optErrMsg = `Invalid {{edHbs.path}}; Provided element is not an instance of {{edHbs.type.code}}.`;
      assertFhirType<{{edHbs.type.code}}>(value, {{edHbs.type.code}}, optErrMsg);
      this.init{{upperFirst edHbs.fieldName}}();
      this.{{edHbs.fieldName}}?.push(value);
    }
    return this;
  }

  /**
   * @returns `true` if the `{{edHbs.fieldName}}` property exists and has a value; `false` otherwise
   */
  public has{{upperFirst edHbs.fieldName}}(): boolean {
    return isDefinedList<{{edHbs.type.code}}>(this.{{edHbs.fieldName}}) && this.{{edHbs.fieldName}}.some((item: {{edHbs.type.code}}) => !item.isEmpty());
  }

  /**
   * Initialize the `{{edHbs.fieldName}}` property
   */
  private init{{upperFirst edHbs.fieldName}}(): void {
    if(!this.has{{upperFirst edHbs.fieldName}}()) {
      this.{{edHbs.fieldName}} = [] as {{edHbs.type.code}}[];
    }
  }
{{/if}}
