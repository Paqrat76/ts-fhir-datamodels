/*
 * Copyright (c) 2025. Joe Paquette
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

/**
 * This file is generated from a FHIR CodeSystem definition.
 * DO NOT make any modifications!
 *
 * ReportRelationTypeEnum Module
 *
 * CodeSystem.url: http://hl7.org/fhir/report-relation-type
 * CodeSystem.name: ReportRelationType
 * CodeSystem.description: The type of relationship between reports.
 * CodeSystem.version: 5.0.0
 * CodeSystem.caseSensitive: true
 *
 * For questions, suggestions, or bugs, please open an issue at [GitHub ts-fhir-datamodels/issues](https://github.com/Paqrat76/ts-fhir-datamodels/issues).
 *
 * @packageDocumentation
 */

import {
  fhirCode,
  FhirCodeDefinition,
  IFhirCodeDefinition,
  IFhirCodeEnum,
  InvalidCodeError,
} from '@paq-ts-fhir/fhir-core';

/**
 * FHIR CodeSystem: ReportRelationTypeEnum
 *
 * @remarks
 * This class is a "pseudo-enumeration" of code values having FHIR code properties.
 *
 * @category CodeSystems
 * @see [FHIR CodeSystem ReportRelationType](http://hl7.org/fhir/report-relation-type)
 */
export class ReportRelationTypeEnum implements IFhirCodeEnum {
  public static readonly REPLACES = new FhirCodeDefinition(
    'REPLACES',
    'replaces',
    'http://hl7.org/fhir/report-relation-type',
    'Replaces',
    'This document replaces or supersedes the target document.',
  );
  public static readonly AMENDS = new FhirCodeDefinition(
    'AMENDS',
    'amends',
    'http://hl7.org/fhir/report-relation-type',
    'Amends',
    'This document notes corrections or changes to replace or supersede parts of the target document.',
  );
  public static readonly APPENDS = new FhirCodeDefinition(
    'APPENDS',
    'appends',
    'http://hl7.org/fhir/report-relation-type',
    'Appends',
    'This document adds additional information to the target document.',
  );
  public static readonly TRANSFORMS = new FhirCodeDefinition(
    'TRANSFORMS',
    'transforms',
    'http://hl7.org/fhir/report-relation-type',
    'Transforms',
    'This document was generated by transforming the target document (eg format or language conversion).',
  );
  public static readonly REPLACED_WITH = new FhirCodeDefinition(
    'REPLACED_WITH',
    'replacedWith',
    'http://hl7.org/fhir/report-relation-type',
    'Replaced With',
    'This document was.',
  );
  public static readonly AMENDED_WITH = new FhirCodeDefinition(
    'AMENDED_WITH',
    'amendedWith',
    'http://hl7.org/fhir/report-relation-type',
    'Amended With',
    'This document was.',
  );
  public static readonly APPENDED_WITH = new FhirCodeDefinition(
    'APPENDED_WITH',
    'appendedWith',
    'http://hl7.org/fhir/report-relation-type',
    'Appended With',
    'This document was.',
  );
  public static readonly TRANSFORMED_WITH = new FhirCodeDefinition(
    'TRANSFORMED_WITH',
    'transformedWith',
    'http://hl7.org/fhir/report-relation-type',
    'Transformed With',
    'This document was.',
  );

  // NULL added to help check for non-existent value
  public static readonly NULL = new FhirCodeDefinition('NULL', `null`);

  /**
   * @returns an IFhirCodeDefinition[] containing the enumeration of code system code definitions
   */
  values(): IFhirCodeDefinition[] {
    return [
      ReportRelationTypeEnum.REPLACES,
      ReportRelationTypeEnum.AMENDS,
      ReportRelationTypeEnum.APPENDS,
      ReportRelationTypeEnum.TRANSFORMS,
      ReportRelationTypeEnum.REPLACED_WITH,
      ReportRelationTypeEnum.AMENDED_WITH,
      ReportRelationTypeEnum.APPENDED_WITH,
      ReportRelationTypeEnum.TRANSFORMED_WITH,
      ReportRelationTypeEnum.NULL
    ];
  }

  /**
   * Converts a given FHIR code into its corresponding FHIR code definition.
   *
   * @param {fhirCode | undefined} code - The FHIR code to be converted. If undefined, an error will be thrown.
   * @returns {IFhirCodeDefinition} The FHIR code definition corresponding to the provided code.
   * @throws {@link InvalidCodeError} for undefined or invalid code value
   */
  fromCode(code: fhirCode | undefined): IFhirCodeDefinition {
    if (code === undefined) {
      throw new InvalidCodeError(`The provided 'code' value is undefined`);
    } else if (ReportRelationTypeEnum.REPLACES.code === code) {
      return ReportRelationTypeEnum.REPLACES;
    } else if (ReportRelationTypeEnum.AMENDS.code === code) {
      return ReportRelationTypeEnum.AMENDS;
    } else if (ReportRelationTypeEnum.APPENDS.code === code) {
      return ReportRelationTypeEnum.APPENDS;
    } else if (ReportRelationTypeEnum.TRANSFORMS.code === code) {
      return ReportRelationTypeEnum.TRANSFORMS;
    } else if (ReportRelationTypeEnum.REPLACED_WITH.code === code) {
      return ReportRelationTypeEnum.REPLACED_WITH;
    } else if (ReportRelationTypeEnum.AMENDED_WITH.code === code) {
      return ReportRelationTypeEnum.AMENDED_WITH;
    } else if (ReportRelationTypeEnum.APPENDED_WITH.code === code) {
      return ReportRelationTypeEnum.APPENDED_WITH;
    } else if (ReportRelationTypeEnum.TRANSFORMED_WITH.code === code) {
      return ReportRelationTypeEnum.TRANSFORMED_WITH;
    } else if (ReportRelationTypeEnum.NULL.code === code) {
      return ReportRelationTypeEnum.NULL;
    } else {
      throw new InvalidCodeError(`Unknown ReportRelationTypeEnum 'code' value '${code}'`);
    }
  }
}
